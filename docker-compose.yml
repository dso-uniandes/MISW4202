services:
  # Redis para la cola de mensajería
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Microservicio de Logística/Inventario
  m-logistica-inventario:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m-logistica-inventario
    command: python entrypoints/entrypoint_logistica.py
    ports:
      - "5002:5002"
    environment:
      - FLASK_ENV=development
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5002
      - SQLALCHEMY_DATABASE_URI=sqlite:////data/misw4202.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - JWT_SECRET_KEY=frase-secreta
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
    networks:
      - app-network

  # Microservicio Monitor
  m-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m-monitor
    command: python entrypoints/entrypoint_monitor.py
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=development
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5001
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
      - m-logistica-inventario
    networks:
      - app-network

  # Worker de Celery
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    command: celery -A celery_app.worker.worker_celery worker --loglevel=info -Q celery,logistica,monitor
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SQLALCHEMY_DATABASE_URI=sqlite:////data/misw4202.db
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
      - m-logistica-inventario
    networks:
      - app-network

  # Monitor de Celery (Flower)
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-flower
    command: celery -A celery_app.worker.worker_celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_UNAUTHENTICATED_API=true
    depends_on:
      - redis
      - celery-worker
    networks:
      - app-network

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"
    depends_on:
      - m-logistica-inventario
      - m-monitor
    networks:
      - app-network

volumes:
  redis_data:
  sqlite_data:

networks:
  app-network:
    driver: bridge