version: '3.8'

services:
  # Redis para la cola de mensajería
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Base de datos SQLite (se manejará como volumen compartido)
  db-volume:
    image: busybox
    volumes:
      - sqlite_data:/data
    command: /bin/true

  # Microservicio principal Python
  microservice-main:
    build:
      context: .
      dockerfile: Dockerfile.main
    container_name: microservice-main
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - SQLALCHEMY_DATABASE_URI=sqlite:////data/misw4202.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
    networks:
      - app-network

  # Microservicio monitor Python
  microservice-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: microservice-monitor
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=development
      - SQLALCHEMY_DATABASE_URI=sqlite:////data/misw4202.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
      - microservice-main
    networks:
      - app-network

  # Worker de Celery
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.main
    container_name: celery-worker
    command: celery -A celery_config.celery worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SQLALCHEMY_DATABASE_URI=sqlite:////data/misw4202.db
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
      - microservice-main
    networks:
      - app-network

  # Monitor de Celery (Flower)
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile.main
    container_name: celery-flower
    command: celery -A celery_config.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    networks:
      - app-network

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"
    depends_on:
      - microservice-main
      - microservice-monitor
    networks:
      - app-network

volumes:
  redis_data:
  sqlite_data:

networks:
  app-network:
    driver: bridge