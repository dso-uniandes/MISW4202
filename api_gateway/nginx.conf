# API Gateway Configuration - nginx dedicado
# Este nginx actúa ÚNICAMENTE como API Gateway para microservicios

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=health_limit:10m rate=10r/s;

# Upstream definitions para load balancing
upstream logistica_backend {
    server m-logistica-inventario:5002;
    # Agregar más instancias aquí para load balancing
}

upstream monitor_backend {
    server m-monitor:5001;
    # Agregar más instancias aquí para load balancing
}

# Log format personalizado para API Gateway
log_format api_gateway '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'service="$upstream_addr"';

server {
    listen 80;
    server_name localhost;
    
    # Usar log format personalizado
    access_log /var/log/nginx/api_gateway.log api_gateway;
    
    # Headers de seguridad para APIs
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-API-Gateway "MISW4202-Gateway/1.0" always;
    
    # Headers CORS para permitir requests desde el frontend
    add_header Access-Control-Allow-Origin "http://localhost:4200" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # ===========================================
    # API GATEWAY - ENDPOINTS CENTRALIZADOS
    # ===========================================

    # Health Check del API Gateway
    location = /health {
        limit_req zone=health_limit burst=5 nodelay;
        access_log off;
        
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","gateway":"api-gateway","version":"1.0","services":{"logistica":"upstream","monitor":"upstream"}}';
    }

    # API Gateway Info
    location = / {
        add_header Content-Type application/json;
        return 200 '{"name":"MISW4202 API Gateway","version":"1.0","description":"Dedicated API Gateway for microservices","endpoints":{"/api/v1/logistica/*":"Microservicio Logística","/api/v1/monitor/*":"Microservicio Monitor"},"rate_limit":"100 req/min","health_check":"/health"}';
    }

    # ===========================================
    # API v1 - RUTAS VERSIONADAS
    # ===========================================

    # Microservicio de Logística v1
    location /api/v1/logistica/ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "http://localhost:4200" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        limit_req zone=api_limit burst=20 nodelay;
        
        # Reescribir URL removiendo prefijo
        rewrite ^/api/v1/logistica/(.*)$ /$1 break;
        
        proxy_pass http://logistica_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Service-Name "logistica";
        proxy_set_header X-Gateway-Route "v1";
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
    }

    # Microservicio Monitor v1
    location /api/v1/monitor/ {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "http://localhost:4200" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
        
        limit_req zone=api_limit burst=10 nodelay;
        
        # Reescribir URL removiendo prefijo
        rewrite ^/api/v1/monitor/(.*)$ /$1 break;
        
        proxy_pass http://monitor_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Service-Name "monitor";
        proxy_set_header X-Gateway-Route "v1";
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
    }

    # ===========================================
    # ERROR HANDLING
    # ===========================================
    
    # Custom error pages
    error_page 404 /404.json;
    error_page 500 502 503 504 /50x.json;
    
    location = /50x.json {
        add_header Content-Type application/json;
        return 500 '{"error":"Internal Server Error","message":"API Gateway service temporarily unavailable","timestamp":"$time_iso8601","gateway":"api-gateway"}';
    }
    
    location = /404.json {
        add_header Content-Type application/json;
        return 404 '{"error":"Endpoint Not Found","message":"API endpoint not found","timestamp":"$time_iso8601","available_endpoints":["/api/v1/logistica/","/api/v1/monitor/","/health"],"documentation":"Contact API team for endpoint list"}';
    }

    # Rate limit error handling
    error_page 429 /rate_limit.json;
    location = /rate_limit.json {
        add_header Content-Type application/json;
        return 429 '{"error":"Rate Limit Exceeded","message":"Too many requests. Limit: 100 req/min","retry_after":60,"timestamp":"$time_iso8601","gateway":"api-gateway"}';
    }

    # Block all other requests
    location / {
        add_header Content-Type application/json;
        return 404 '{"error":"Invalid Route","message":"This is an API Gateway. Use /api/v1/service/endpoint format","available_services":["logistica","monitor"],"health_check":"/health"}';
    }
}
